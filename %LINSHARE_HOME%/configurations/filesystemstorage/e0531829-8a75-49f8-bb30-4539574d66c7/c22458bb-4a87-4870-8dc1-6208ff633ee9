using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using MarketPlace.Vendor.Models;
using MarketPlace.Global;

using System.Web;
using System.IO;
using System.Collections.Specialized;
using System.Threading.Tasks;
using System.Diagnostics;

namespace MarketPlace.Vendor.Controllers
{
    [AuthorizeApi]
    public class ChunkController : ApiController
    {
        MPEntities db = new MPEntities();


        [Route("Chunk/GetChunksbyCategory")]
        public IHttpActionResult GetChunksbyCategory(Guid CategoryId, Guid SubCategoryId)
        {
            try
            {
                List<Groupname> ogroups = new List<Groupname>();
                if (SubCategoryId != Guid.Empty)
                {
                    ogroups = (from g in db.Mappings join gp in db.ChunkGroups on g.GroupId equals gp.Id where g.ReferenceId == SubCategoryId && g.IsActive == true && gp.IsActive == true orderby gp.ShowSequence  select new Groupname {GroupId=g.GroupId,GroupName=gp.Name}).ToList();
                }
                else
                {
                    ogroups = (from g in db.Mappings join gp in db.ChunkGroups on g.GroupId equals gp.Id where g.ReferenceId == CategoryId && g.IsActive == true && gp.IsActive == true orderby gp.ShowSequence select new Groupname { GroupId = g.GroupId, GroupName = gp.Name }).ToList();
                }

                for(int i=0;i<ogroups.Count();i++)
                {
                    var ogroupId = ogroups[i].GroupId;
                    var ochunks = (from g in db.Chunks
                                   join p in db.Properties on g.PropertyId equals p.Id
                                   where g.IsActive == true && g.GroupId == ogroupId
                                   orderby g.ShowSequence
                                   select new GetChunk
                                   {
                                       Id = g.Id,
                                       DefaultValue = g.DefaultValue,
                                       ShowSequence = g.ShowSequence,
                                       DisplayName = g.DisplayName,
                                       ErrorMessage = g.ErrorMessage,
                                       IsActive = g.IsActive,
                                       IsDefault = g.IsDefault,
                                       IsImplementation = g.IsImplementation,
                                       IsMandatory = g.IsMandatory,
                                       IsUnique = g.IsUnique,
                                       IsVisible = g.IsVisible,
                                       MaxLength = g.MaxLength,
                                       Placeholder = g.Placeholder,
                                       PropertyId = g.PropertyId,
                                       GroupId = g.GroupId,
                                       ValidationMessage = g.ValidationMessage,
                                       DataType = p.DataType,
                                       PropertyName = p.Name,
                                       Value = string.Empty
                                   }).ToArray();

                    for(int j=0;j<ochunks.Count();j++)
                    {
                        var opropertyId = ochunks[j].PropertyId;
                        ochunks[j].Lookups = new List<GetLookup>();
                        var olookups = db.Lookups.Where(w => w.PropertyId == opropertyId).OrderBy(w => w.ShowSequence).ToList();
                        if (olookups != null)
                        {
                            foreach (var looks in olookups)
                            {
                               ochunks[j].Lookups.Add(new GetLookup() { LookUpId = looks.Id, Name = looks.Name, ShowSequence = looks.ShowSequence });
                            }
                        }
                    }

                    ogroups[i].chunks = ochunks;
                }

                return Ok(ogroups);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Source);
            }
        }

        [Route("Chunk/GetChunksbyActivity")]
        public IHttpActionResult GetChunksbyActivity(Guid ActivityId)
        {
            try
            {
                List<Groupname> ogroups = new List<Groupname>();

                ogroups = (from g in db.Mappings join gp in db.ChunkGroups on g.GroupId equals gp.Id where g.ReferenceId == ActivityId && g.IsActive == true && gp.IsActive == true orderby gp.ShowSequence select new Groupname { GroupId = g.GroupId, GroupName = gp.Name }).ToList();

                for (int i = 0; i < ogroups.Count(); i++)
                {
                    var ogroupId = ogroups[i].GroupId;
                    var ochunks = (from g in db.Chunks
                                   join p in db.Properties on g.PropertyId equals p.Id
                                   where g.IsActive == true && g.GroupId == ogroupId
                                   orderby g.ShowSequence
                                   select new GetChunk
                                   {
                                       Id = g.Id,
                                       DefaultValue = g.DefaultValue,
                                       ShowSequence = g.ShowSequence,
                                       DisplayName = g.DisplayName,
                                       ErrorMessage = g.ErrorMessage,
                                       IsActive = g.IsActive,
                                       IsDefault = g.IsDefault,
                                       IsImplementation = g.IsImplementation,
                                       IsMandatory = g.IsMandatory,
                                       IsUnique = g.IsUnique,
                                       IsVisible = g.IsVisible,
                                       MaxLength = g.MaxLength,
                                       Placeholder = g.Placeholder,
                                       PropertyId = g.PropertyId,
                                       GroupId = g.GroupId,
                                       ValidationMessage = g.ValidationMessage,
                                       DataType = p.DataType,
                                       PropertyName = p.Name,
                                       Value = string.Empty
                                   }).ToArray();

                    for (int j = 0; j < ochunks.Count(); j++)
                    {
                        var opropertyId = ochunks[j].PropertyId;
                        ochunks[j].Lookups = new List<GetLookup>();
                        var olookups = db.Lookups.Where(w => w.PropertyId == opropertyId).OrderBy(w => w.ShowSequence).ToList();
                        if (olookups != null)
                        {
                            foreach (var looks in olookups)
                            {
                                ochunks[j].Lookups.Add(new GetLookup() { LookUpId = looks.Id, Name = looks.Name, ShowSequence = looks.ShowSequence });
                            }
                        }
                    }

                    ogroups[i].chunks = ochunks;
                }

                return Ok(ogroups);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Source);
            }
        }


        [Route("Chunk/InsertOrgChunks")]
        public IHttpActionResult InsertOrgChunks(PostChunks odata)
        {
            try
            {

                var orgExist = db.Organizations.Where(w => w.Id == odata.OrgId).SingleOrDefault();
                if (orgExist == null)
                {
                    Organization org = new Organization();
                    org.Id = Guid.NewGuid();
                    org.Name = odata.OrgName;
                    org.Description = odata.OrgDescription;
                    org.Status = 0;
                    org.IsActive = false;
                    org.LocationId = null;
                    org.Address = odata.Address;
                    org.Latitude = odata.Latitude;
                    org.Longitude = odata.Longitude;
                    org.ModifiedDate = DateTime.Now;
                    org.ActivationDate = DateTime.Now;
                    org.CategoryId = odata.CategoryId;
                    org.CreatedDate = DateTime.Now;
                    org.Phone = odata.Phone;
                    db.Organizations.Add(org);


                    foreach (var groups in odata.ogroups)
                    {
                        foreach (var item in groups.chunks)
                        {
                            OrganizationChunk ochunk = new OrganizationChunk();
                            ochunk.Id = Guid.NewGuid();
                            ochunk.CreatedDate = DateTime.Now;
                            ochunk.ChunkId = item.Id;
                            ochunk.IsActive = true;
                            ochunk.OragnizationId = org.Id; //rename
                            ochunk.UserId = new Guid(Request.GetAppUserId());
                            ochunk.ModifiedDate = DateTime.Now;
                            ochunk.Value = item.Value;
                            db.OrganizationChunks.Add(ochunk);

                        }
                    }
                    foreach (var img in odata.images)
                    {
                        MediaStorage dataobject = new MediaStorage();
                        dataobject.Id = Guid.NewGuid();
                        dataobject.CreatedDate = DateTime.Now;
                        dataobject.IsActive = true;
                        dataobject.IsDefault = true;
                        dataobject.IsLogo = img.IsLogo;
                        dataobject.IsVideo = false;
                        dataobject.URl = img.file;
                        dataobject.ReferenceId = org.Id;
                        db.MediaStorages.Add(dataobject);

                    }
                    db.SaveChanges();
                }
                else
                {

                    orgExist.Name = odata.OrgName;
                    orgExist.Description = odata.OrgDescription;
                    orgExist.ModifiedDate = DateTime.Now;
                    orgExist.Address = odata.Address;
                    orgExist.Latitude = odata.Latitude;
                    orgExist.Longitude = odata.Longitude;
                    orgExist.Phone = odata.Phone;

                    foreach (var groups in odata.ogroups)
                    {
                        foreach (var item in groups.chunks)
                        {
                            var chunkExist = db.OrganizationChunks.Where(v => v.OragnizationId == odata.OrgId && v.ChunkId == item.Id).SingleOrDefault();
                            if (chunkExist != null)
                            {
                                chunkExist.ModifiedDate = DateTime.Now;
                                chunkExist.Value = item.Value;
                            }else
                            {
                                OrganizationChunk ochunk = new OrganizationChunk();
                                ochunk.Id = Guid.NewGuid();
                                ochunk.CreatedDate = DateTime.Now;
                                ochunk.ChunkId = item.Id;
                                ochunk.IsActive = true;
                                ochunk.OragnizationId = odata.OrgId; //rename
                                ochunk.UserId = new Guid(Request.GetAppUserId());
                                ochunk.ModifiedDate = DateTime.Now;
                                ochunk.Value = item.Value;
                                db.OrganizationChunks.Add(ochunk);
                            }           
                        }
                    }
                    var existingImages = db.MediaStorages.Where(w => w.ReferenceId == odata.OrgId).ToList();
                    foreach (var item in existingImages)
                    {
                        item.IsActive = false;
                    }
                    foreach (var img in odata.images)
                    {
                        MediaStorage dataobject = new MediaStorage();
                        dataobject.Id = Guid.NewGuid();
                        dataobject.CreatedDate = DateTime.Now;
                        dataobject.IsActive = true;
                        dataobject.IsDefault = true;
                        dataobject.IsLogo = img.IsLogo;
                        dataobject.IsVideo = false;
                        dataobject.URl = img.file;
                        dataobject.ReferenceId = odata.OrgId;
                        db.MediaStorages.Add(dataobject);

                    }
                    db.SaveChanges();
                }
             
               
                return Ok();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Source);
            }
        }


        [Route("Chunk/InsertActivityChunks")]
        public IHttpActionResult InsertActivityChunks(PostActivityChunks odata)
        {
            try
            {
                var activityExist = db.OrganizationActivities.Where(w => w.Id == odata.ActivityId).SingleOrDefault();
                if(activityExist == null)
                {
                    OrganizationActivity org = new OrganizationActivity();
                    org.Id = Guid.NewGuid();
                    org.Name = odata.ActivityName;
                    org.Description = odata.ActivityDescription;
                    org.Address = odata.Address;
                    org.Longitude = odata.Longitude;
                    org.Latitude = odata.Latitude;
                    org.ispublished = false;
                    org.IsActive = true;
                    org.OragnizationId = odata.OrganizationId;
                    org.ActivityId = odata.ActivityId;
                    org.StartDate = DateTime.Now;
                    org.EndDate = DateTime.Now;
                    db.OrganizationActivities.Add(org);
                   // db.SaveChanges();

                    foreach (var groups in odata.ogroups)
                    {
                        foreach (var item in groups.chunks)
                        {
                            ActivityChunk ochunk = new ActivityChunk();
                            ochunk.Id = Guid.NewGuid();
                            ochunk.CreatedDate = DateTime.Now;
                            ochunk.ChunkId = item.Id;
                            ochunk.OrgActivityId = org.Id;
                            ochunk.UserId = new Guid(Request.GetAppUserId());
                            ochunk.ModifiedDate = DateTime.Now;
                            ochunk.Value = item.Value;
                            db.ActivityChunks.Add(ochunk);
                        }
                    }
                   // db.SaveChanges();

                    foreach (var img in odata.images)
                    {
                        MediaStorage dataobject = new MediaStorage();
                        dataobject.Id = Guid.NewGuid();
                        dataobject.CreatedDate = DateTime.Now;
                        dataobject.IsActive = true;
                        dataobject.IsDefault = true;
                        dataobject.IsLogo = img.IsLogo;
                        dataobject.IsVideo = false;
                        dataobject.URl = img.file;
                        dataobject.ReferenceId = org.Id;
                        db.MediaStorages.Add(dataobject);
                       
                    }
                    db.SaveChanges();
                }else
                {
                    activityExist.Name = odata.ActivityName;
                    activityExist.Description = odata.ActivityDescription;
                    activityExist.Address = odata.Address;
                    activityExist.Longitude = odata.Longitude;
                    activityExist.Latitude = odata.Latitude;


                    foreach (var groups in odata.ogroups)
                    {
                        
                        foreach (var item in groups.chunks)
                        {
                            var chunkexist = db.ActivityChunks.Where(w => w.OrgActivityId == odata.ActivityId && w.ChunkId == item.Id).SingleOrDefault();
                            if(chunkexist != null)
                            {
                                chunkexist.ModifiedDate = DateTime.Now;
                                chunkexist.Value = item.Value;
                            }
                             
                        }
                    }
                    
                        var existingImages = db.MediaStorages.Where(w => w.ReferenceId == odata.ActivityId).ToList();
                        foreach(var item in existingImages)
                        {
                            item.IsActive = false;
                        }
                        foreach (var img in odata.images)
                        {
                            MediaStorage dataobject = new MediaStorage();
                            dataobject.Id = Guid.NewGuid();
                            dataobject.CreatedDate = DateTime.Now;
                            dataobject.IsActive = true;
                            dataobject.IsDefault = true;
                            dataobject.IsLogo = img.IsLogo;
                            dataobject.IsVideo = false;
                            dataobject.URl = img.file;
                            dataobject.ReferenceId = odata.ActivityId;
                            db.MediaStorages.Add(dataobject);

                        }

                    db.SaveChanges();


                }
                
                return Ok();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Source);
            }
        }

        [Route("Chunk/UploadMediaStorage")]
        public IHttpActionResult UploadMediaStorage(Uploadimage[] base64file)
        {
            try
            {
                for(int i=0;i<base64file.Length;i++)
                {
                   
                    var isPathorb64 = Path.GetExtension(base64file[i].file);
                    if (isPathorb64 != ".jpg")
                    {
                        string ImageName = Guid.NewGuid().ToString() + ".jpg";
                        string base64 = base64file[i].file.Substring(base64file[i].file.IndexOf(',') + 1);
                        if (!string.IsNullOrEmpty(base64))
                        {
                            VendorEmailService.UploadImagebase64(base64, ImageName);
                        }
                        else
                        {
                            ImageName = string.Empty;
                        }

                        base64file[i].file = VendorEmailService.ImageURL + ImageName;
                    }
                   
                }
                return Ok(base64file);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}
